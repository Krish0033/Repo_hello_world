import argparse
import boto3
import time

class Account(object):
    def __init__(self, **kwds):
        pass

    @property
    def vpc(self):
        if self._vpc is None:
            self._vpc = Vpc()
        return self._vpc

    @property
    def aws_session(self):
        if self._aws_session is None:
            self._aws_session = boto3.session.Session(profile_name=self._aws_profile_name)
        return self._aws_session

    def _wait_until_instance_initialized(self, instance, region_name):
        ec2_client = self.aws_session.client(service_name = 'ec2', region_name=region_name)

        response = ec2_client.describe_instance_status(InstanceIds=[instance.instance_id], IncludeAllInstances=True)
        while response['InstanceStatuses'][0]['InstanceStatus']['Status'] == 'initializing':
            response = ec2_client.describe_instance_status(InstanceIds=[instance.instance_id], IncludeAllInstances=True)

        assert response['InstanceStatuses'][0]['InstanceStatus']['Status'] == 'ok'

    def _wait_until_image_is_available(self, image):
        while image.state == 'pending':
            time.sleep(1)
            image.reload()

        assert image.state == 'available'

    def _create_encrypted_image_copy(self, image, region_name):
        ec2_client = self.aws_session.client(service_name = 'ec2', region_name=region_name)

        response = ec2_client.copy_image(
            SourceRegion=region_name,
            SourceImageId=image.image_id,
            Name='CORP_ENC_' + image.name,
            Description='Encrypted version of ' + image.name,
            Encrypted=True,
            KmsKeyId=args.kms_key_id
        )

        ec2 = self.aws_session.resource('ec2', region_name)
        return ec2.Image(response['ImageId'])

    def _destroy_snapshot_for_ami(self, ami_id, region_name):
        ec2 = self.aws_session.resource('ec2', region_name)
        snapshots = list(
            ec2.snapshots.filter(
                Filters=[
                    {
                        'Name': 'description',
                        'Values': ['Created by CreateImage(' + '*' + ami_id + '*']

                    }
                ]
            )
        )

        assert len(snapshots) == 1

        snapshots[0].delete()

    def create_encrypted_image(self, ami_id, region_name):
        ec2 = self.aws_session.resource('ec2', region_name)
        print 'launching temporary instance from ' + ami_id
        instances = ec2.create_instances(
            ImageId=ami_id,
            InstanceType='t2.micro',
            SubnetId=args.subnet_id,
            MinCount=1,
            MaxCount=1
        )

        instance = instances[0]
        instance.wait_until_running()
        instance.create_tags(
            Tags=[
                {
                    'Key': 'Name',
                    'Value': 'temp - image build'
                },
                {
                    'Key': 'UAI',
                    'Value': 'UAI2000021'
                }
            ]
        )

        self._wait_until_instance_initialized(instance, region_name)

        ami = ec2.Image(ami_id)
        print 'creating temporary ami'
        temp_ami = instance.create_image(
            Name=ami.name
        )

        self._wait_until_image_is_available(temp_ami)
        print 'creating encrypted ami'
        enc_ami = self._create_encrypted_image_copy(temp_ami, region_name)
        self._wait_until_image_is_available(enc_ami)

        #tag the ami
        enc_ami.create_tags(
            Tags=[
                {
                    'Key': 'UAI',
                    'Value': 'UAI2000021'
                }
            ]
        )

        #tag the snapshot
        snapshots = list(
            ec2.snapshots.filter(
                Filters=[
                    {
                        'Name': 'description',
                        'Values': ['Copied for DestinationAmi ' + enc_ami.id + '*']

                    }
                ]
            )
        )

        snapshots[0].create_tags(
            Tags=[
                {
                    'Key': 'UAI',
                    'Value': 'UAI2000021'
                }
            ]
        )

        #clean up
        print 'terminate temporary instance'
        instance.terminate()
        temp_ami_id = temp_ami.image_id
        print 'deregister and destroy temporary image'
        temp_ami.deregister()
        self._destroy_snapshot_for_ami(temp_ami_id, region_name)
        print 'create encrypted image complete: ' + enc_ami.id

    def remove_depreciated_amis(self):
        'remove encryted amis that are unused and no longer have a source ami'
        pass


if __name__ == "__main__":

    #parse args
    parser = argparse.ArgumentParser()
    parser.add_argument("ami_id", help="ami id to be used as basis for encrypted image")
    parser.add_argument("profile_name", help="profile to use for api calls")
    parser.add_argument("subnet_id", help="subnet to create temporary instance in")
    parser.add_argument("kms_key_id", help="arn of kms key to use for encryption")
    parser.add_argument("region_name", help="name of region to use")
    args = parser.parse_args()

    ami_id = args.ami_id
    #ami = 'ami-cde96fda'
    aws_session = boto3.session.Session(profile_name=args.profile_name)
    #aws_session = boto3.session.Session(profile_name="med-prod-poweruser")
    aws_account = Account()
    #this is cheating
    aws_account._aws_session = aws_session
    aws_account.create_encrypted_image(ami_id, args.region_name)
